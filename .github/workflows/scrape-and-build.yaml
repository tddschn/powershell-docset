name: Scrape Powershell doc and build docset
on:
  workflow_dispatch:
    inputs:
      powershell-version:
        description: "Powershell version"
        required: false
        default: "latest"
        # default: "7.3.1"

jobs:
  scrape-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install deps
        run: pip install selenium requests bs4
      - name: scrape doc
        id: scrape-doc
        shell: bash
        run: |
          if [[ '${{ inputs.powershell-version }}'='latest' ]]; then
            TAG_PATCH="$(curl https://formulae.brew.sh/api/cask/powershell.json | jq -r '.version')"
          else
            TAG_PATCH="${{ inputs.powershell-version }}"
          fi
          TAG_MINOR="$(echo "${TAG_PATCH}" | cut -d'.' -f1,2)"
          echo "TAG_PATCH=${TAG_PATCH}" >> "$GITHUB_OUTPUT"
          echo "TAG_MINOR=${TAG_MINOR}" >> "$GITHUB_OUTPUT"

          mkdir -p Powershell

          python3 posh-to-dash.py --temporary --output="Powershell/versions/${TAG_MINOR}/Powershell.tgz" --version="${TAG_MINOR}"

          cp static/icon.png Powershell/icon.png
          cp static/icon@2x.png Powershell/icon@2x.png
          cp "Powershell/versions/${TAG_MINOR}/Powershell.tgz" Powershell/Powershell.tgz

          cp static/docset-template/README.md Powershell/README.md
          python3 static/docset-template/create-versioned-docset-json.py --output=Powershell/docset.json --version="${TAG_MINOR}"
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: "powershell-docset-${{ steps.scrape-doc.outputs.TAG_PATCH }}"
          retention-days: 3
          path: |
            Powershell
      - name: release docset
        shell: bash
        env:
          TAG: "${{ steps.scrape-doc.outputs.TAG_PATCH }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ZIP_FILENAME="Powershell-docset-v${TAG}.zip"
          zip -r "${ZIP_FILENAME}" Powershell

          set +e
          # don't exit on error
          gh release create "v${TAG}" --notes "Release from GitHub Actions"
          set -e

          gh release upload "v${TAG}" "${ZIP_FILENAME}"
